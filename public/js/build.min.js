(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
var SubscriptionBox = require('./Components/SubscriptionBox');

var App = React.createClass({displayName: "App",
  render: function() {
    return (
      React.createElement("div", {className: "container-fluid"}, 
        React.createElement("div", {className: "row header"}, 
          React.createElement("div", {className: "col-xs-6 col-md-4"}, React.createElement("a", {href: "/"}, "myTube"))
        ), 
        React.createElement("div", {className: "row myTube"}, 
          React.createElement("span", {className: "title"}, "Subscriptions"), 
          React.createElement("div", {className: "container-fluid"}, 
            React.createElement(SubscriptionBox, null)
          )
        )
      )
    )
  }
});

ReactDOM.render(React.createElement(App, null), document.getElementById('app'));


},{"./Components/SubscriptionBox":2}],2:[function(require,module,exports){
var VideoTile = require('./VideoTile')
var SubscriptionBox = React.createClass({displayName: "SubscriptionBox",
  getInitialState: function() {
    return {
      videos: []
    };
  },

  vidClick: function(index) {
    console.log('Video: ' + this.refs['item' + index]);
  },

  authorClick: function(index) {
    console.log('Author: ' + this.refs['item' + index]);
  },

  componentDidMount: function() {
    this.serverRequest = $.get('/api/videos', function (videos) {
      this.setState({
        videos
      });
    }.bind(this));
  },

  render: function() {
    return (
      React.createElement("div", {className: "subscriptionBox"}, 
        this.state.videos.map(function(item, i) {
          return (
            React.createElement(VideoTile, {
              vidClick: this.vidClick.bind(this, i), 
              authorClick: this.authorClick.bind(this, i), 
              key: i, 
              title: item.title.slice(0, 40) + "...", 
              thumb: item.thumbnail, 
              channelName: item.channelName, 
              info: item.info, 
              id: item.youtubeID, 
              ref: 'item' + i}
            )
          );
        }, this)
      )
    )
  }
});

module.exports = SubscriptionBox;


},{"./VideoTile":3}],3:[function(require,module,exports){
var VideoTile = React.createClass({displayName: "VideoTile",
  render: function() {
    return (
      React.createElement("div", {className: "videoTile"}, 
        React.createElement("div", {className: "picture", onClick: this.props.vidClick}, React.createElement("img", {src: this.props.thumb})), 
        React.createElement("div", {className: "name", onClick: this.props.vidClick}, this.props.title), 
        React.createElement("div", {className: "author", onClick: this.props.authorClick}, this.props.channelName), 
        React.createElement("div", {className: "info"}, this.props.info)
      )
    )
  }
});

/*
<div className="picture" onClick={this.props.vidClick}><img src='http://localhost:3000/img/a.jpg' /></div>
<div className="name" onClick={this.props.vidClick}>MAKE THEM ALL FLOOFY</div>
<div className="author" onClick={this.props.authorClick}>Snow Dogs Vlogs</div>
<div className="info">3,720 views â€¢ 5 hours ago</div>
*/

module.exports = VideoTile;


},{}]},{},[1])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
