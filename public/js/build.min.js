(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
var SubscriptionBox = require('./Components/SubscriptionBox');

var App = React.createClass({displayName: "App",
  render: function() {
    return (
      React.createElement("div", {className: "container-fluid"}, 
        React.createElement("div", {className: "row header"}, 
          React.createElement("div", {className: "col-xs-6 col-md-4"}, React.createElement("a", {href: "/"}, "myTube"))
        ), 
        React.createElement("div", {className: "row myTube"}, 
          React.createElement("span", {className: "title"}, "Subscriptions"), 
          React.createElement("div", {className: "container-fluid"}, 
            React.createElement(SubscriptionBox, null)
          )
        )
      )
    )
  }
});

ReactDOM.render(React.createElement(App, null), document.getElementById('app'));


},{"./Components/SubscriptionBox":2}],2:[function(require,module,exports){
//var DropDownMenu = require('./DropDownMenu');
var VideoTile = require('./VideoTile')
var SubscriptionBox = React.createClass({displayName: "SubscriptionBox",
  render: function() {

    return (
      React.createElement("div", {className: "subscriptionBox"}, 
        React.createElement(VideoTile, null), 
        React.createElement(VideoTile, null), 
        React.createElement(VideoTile, null), 
        React.createElement(VideoTile, null), 
        React.createElement(VideoTile, null), 
        React.createElement(VideoTile, null), 
        React.createElement(VideoTile, null)
      )
    )
  }
});

module.exports = SubscriptionBox;


},{"./VideoTile":3}],3:[function(require,module,exports){
var VideoTile = React.createClass({displayName: "VideoTile",
  render: function() {
    return (
      React.createElement("div", {className: "videoTile"}, 
        React.createElement("div", {className: "picture"}, React.createElement("a", {href: ""}, React.createElement("img", {src: "http://localhost:3000/img/a.jpg"}))), 
        React.createElement("div", {className: "name"}, React.createElement("a", {href: ""}, "MAKE THEM ALL FLOOFY")), 
        React.createElement("div", {className: "author"}, React.createElement("a", {href: ""}, "Snow Dogs Vlogs")), 
        React.createElement("div", {className: "info"}, "3,720 views â€¢ 5 hours ago")
      )
    )
  }
});

module.exports = VideoTile;


},{}]},{},[1])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
